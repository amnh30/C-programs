*************************************************************************************
**  File   : Notes for Embedded Systems Diploma.                                   **
**  Details: C & Interfacing.                                                      **
**  Author : Ahmed Nageeb                                                          **
*************************************************************************************
----------------------- START ---------------------------------
1-jira Team Software
---------------------------------------------------------------
2-varibale rules now space betwwn varible naming
---------------------------------------------------------------
3-keywords dont name if do etc.
---------------------------------------------------------------
4- specifier %i
---------------------------------------------------------------
5- %i %c %f %0.2f
---------------------------------------------------------------
6-differences btwn variable declaration & definition
---------------------------------------------------------------
7- extern before declaration variable
---------------------------------------------------------------
8-signed number = 56
printf("%i",sizeof(number));
output is 4
---------------------------------------------------------------
9-int , test_2, test_3=606;
test_1 ?????
test_2 ???????
test_3 = 606
10-any global variable not intialized = 0
---------------------------------------------------------------
11-any local variable not intialized = cabidge value
---------------------------------------------------------------
12- u can switch the position betwn constant and int
---------------------------------------------------------------
13- prefix 0 octa;,0x hexdecimal - sifuix u unsigned,l long ,f floating
--------------------------------------------------------------------------------
14- mark = mark++ /*no effect */ - mark = ++mark /* increment mark*/
--------------------------------------------------------------------------------
15- bitwise and is very important(u can clear the bits with 0) 0b mean using binary
-------------------------------------------------------------------------------- 
16-specifier %x write the variable in hexadecimal
--------------------------------------------------------------------------------
17-bit masking 
--------------------------------------------------------------------------------
18-scanf("%i", &variable_name)
--------------------------------------------------------------------------------
20- %c print the character
--------------------------------------------------------------------------------
21- char promotion is very important
--------------------------------------------------------------------------------
22- ^ XOR opposite the bit toggle
--------------------------------------------------------------------------------
23- bit clear  variable &= ~(1<<Bit_position);
        set    variable |= (1<<BIt_Position);
        toggle variable ^= (1<<Bit_Position); very important opposite the value
--------------------------------------------------------------------------------
24- dont use goto 
ex.
again:
goto
--------------------------------------------------------------------------------
25- 
-its important to add break at the end of every case in switch case if th case
    is true the microcontroller will continue in printing the casess which after 
    the true one.
-default u can write  break or not but becarefull with the position of 
    the default the most commen at the end but u cans change the place.
-You cant put variiable in cases.
ex.
case y : // this is wrong
breake;
if you want to set range in case 1...1
--------------------------------------------------------------------------------
26-
-in for loop u can wirte the counter in the {} 

-infinite for loop 

    for(;;){

    }

--------------------------------------------------------------------------------
27-if u want to change the data type put (type) before variable_name
    EX.
        (Float)variable_name
--------------------------------------------------------------------------------
28-by default any auto  is local variable only with local variable
    ex.
     auto int Number_1
--------------------------------------------------------------------------------
29- if u ant to write cariable in cpu registers write register before data type
    only in local variable and maybe the compiler wont write the value in the cpu
    registers baesed on free registers in cpu
    ex.
     register  unsigned int Number_1;
--------------------------------------------------------------------------------
30- u cant access the address of cpu registers  
--------------------------------------------------------------------------------
31-extern uses in data declaration
--------------------------------------------------------------------------------
32-no declaration for local variable
--------------------------------------------------------------------------------
33- static makes the global value project scope to file scope
--------------------------------------------------------------------------------
34-double Quotes string & single Quotes one letter
----------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------Second-Try--------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
35-escape sequences:
\n --> new line
\a --> alarm
\t --> tab
\\ --> print \
\" --> print "
--------------------------------------------------------------------------------
36- it recommended to set signed or unsigned befor variable type case some
 compiler random it
--------------------------------------------------------------------------------
37-sizeof() operator
--------------------------------------------------------------------------------
38-definition take memorey 
declaration doesnt take memorey 
to declare us extern  before data type
--------------------------------------------------------------------------------
39-if u set the varuiable unsigned only the compiler will assume it int data type
--------------------------------------------------------------------------------
40-errors types

    syntax error   --> write wrong c syntax as Int instead of int
    Run Time error --> happens in execution-time after successful compilation as divion by 0
    Linker error   --> after all file compilation the linker lin all file the error happens here as undefinde variable
    logical error  --> write good syntax but doesnt do the wanted function as closing loop with ; after condtions section
    semantic error --> occured when the statements arnt understandable by the compiler like use of uninitialized variable
        error in expression, array index out of range and type compatibility
--------------------------------------------------------------------------------
41- literals
    prefix 0 = octa,0x = hex & suffix u = unsigned, l = long, f = float ex 200.0f
    Note not uu or ll, 200f, 0.5e, , .5e
    
--------------------------------------------------------------------------------
42-test++ post increment, ++test pre increment
--------------------------------------------------------------------------------
43-promotion can be applied on char and short so becarefull important
--------------------------------------------------------------------------------
44- ?: ternary operator take 3 expression variable = expression1 ? expression2 :expression3
    ex. short = NumberOne == NumberTwo ? 0x11 : 0X22 ;
--------------------------------------------------------------------------------
45-scanf("%i%i%i", &num1,&num2,&num3); to take mult number from user
--------------------------------------------------------------------------------
46-nested if  u must break any case in switch u dont need to put break for default
    if ath the end of switch    
 -you can  add Range in switch with  Number ... Number
 Ex.
    202 ... 500
--------------------------------------------------------------------------------
47-dont define the variable in for expression
--------------------------------------------------------------------------------
48-any function have to return error state
--------------------------------------------------------------------------------
49-set the name of function with the name of module to ease selecting the function
----------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------Memorey-Stack---------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
50- unsigned int Number1 = 55; /* Global Variable Initialized */     .data ROM .data RAM
    unsigned int Number2; /* Global Variable Not Initialized */                .bss  RAM block stated by symbol
    unsigned int Number3 = 0; /* Global Variable Initialized To 0 */           .bss  RAM
    const unsigned int Number4 = 55; /* Constant Global Variable Initialized To 55 */ .rodata ROM optomize replace the variable with value
    unsigned int Number1 = 55; /* Local Variable Initialized */                         .stack RAM
    unsigned int Number2; /* Local Variable Not Initialized */                          .stack RAM
    unsigned int Number3 = 0; /* Local Variable Initialized To 0 */                     .stack RAM
    const unsigned int Number4 = 55; /* Constant Local Variable Initialized To 55 */    .stack RAM

    The code Is stored in .text/code Segement ROM
    .heap RAM set memorey in run time not determined
--------------------------------------------------------------------------------
51-any auto variable is local variable  
--------------------------------------------------------------------------------
52-static with global variable and function can be seen only in the current file only
    static with local variable stay in the .data segement until the end of program
----------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------Preprocessor-Directives-------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
53-cpp FileName.c > FileName.i --> to create intermediate fil of pre-processing
    gcc -o FileName.exe FileName.c FileName2.c --> compile the file to exe file; -o --> Place the output into <file>.
    gcc -S FileName.i --> compile the file into assembley file ;    -S --> Compile only; do not assemble or link.

--------------------------------------------------------------------------------
54- in macros dont put semicolon and comment in the end and dont make it empity ex #define DefineName Value
--------------------------------------------------------------------------------
55-#/
define /
DefineName /
value
this is none line micro takecare the spaces betwn defin / and DefineName /
--------------------------------------------------------------------------------
56- function like micro # define Function_Name(paramter1,paramter2,...) (Function content)
--------------------------------------------------------------------------------
57-FLM h
--------------------------------------------------------------------------------
58-file guard in Header file to protect reinlcuding the heaer file ex 
    #ifndef _LCD_H_
    #define _LCD_H_

    write every declaration here 

    #endif  
--------------------------------------------------------------------------------
59-if u want modify the defaukt defined macros with #line Line_Number "File_Name" ex

--------------------------------------------------------------------------------
60- #pragma once --> it can replace file guard but it depend on the compiler type
    #pragma GCC poison printf --> it prevent the use from using printf but it depend on the compiler type
    #pragma GCC waring "app.h is used "--> it write waring to user but it depend on the compiler type
    #pragma GCC error "app.h is used " --> it write error to user but it depend on the compiler type
----------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------Array-----------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------

61- unsigned int array[40] = {1,5,[15]= 0x66,56,[36]=0x56};
--------------------------------------------------------------------------------
62-the array any overwrite memorey pcae because it can see the lenght of it so u have to make rule to set the size of it 
--------------------------------------------------------------------------------
63- if you  want to access any element of array FirstElementAdress+(WantedElementNo.  * SizeOfOneElement)
--------------------------------------------------------------------------------
64-the time to get access any element in arrray is the same as access first element fastest type of data storage
--------------------------------------------------------------------------------
65-in char array u have set null terminator that meand add extra one elemnt in size of arrray to avoid conflict in printing
    ex.
    char array[6] = "Ahmed"; //here we added extra one element to avoid conflict
--------------------------------------------------------------------------------
66-we can scan char as string without & in the scanf function but becarefull   
    if u put space in the scan the rest of text after space will be neglected
    to fix after scan put the string arrray name in funcion call gets()
    ex.
        scanf("%s",string);
        gets(string);
--------------------------------------------------------------------------------
67-specifier %c have a problem with char so u have to clear buffer every time u
take value of char from user with fflush(stdin);    
ex.
    scanf("%c",string);
    fflush(stdin);


--------------------------------------------------------------------------------
68-it very important to make the variable constant if u wont modify it in funtion 
ex.
    Void ArrayPrint(const array[], const arraysize);
    ArrayPrint(ArrrayName,ArraySize); // call function to set array in it
    Void ArrayPrint(const array[], const arraysize){
        function content without changing in value of array[] or arraysize
    }
    this it general rule and important
--------------------------------------------------------------------------------
69- in 2D array u have to set the second size of enternal array in the function
    ex.
        Void ArrayPrint(const array[][30], const arraysize);
    ArrayPrint(ArrrayName,ArraySize); // call function to set array in it
    Void ArrayPrint(const array[][30], const arraysize){
        function content without changing in value of array[] or arraysize }
----------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------pointers--------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------------------------
70-pointer storage address of variable and they must be same type of data
--------------------------------------------------------------------------------
71- unsigned int *ptr; --> pointer  pointing to variable with data type unsigned int 
      unsigned int  *ptr2;
      ptr2 = &variable; //it means u set the address of variable  in pointer ptr2
      printf("%i",*ptr2); this means got to the address in ptr2 & displaythe content ==*(&variable) 
      *ptr2 = 5;
    &variable_name --> the value of this is the address of variable_name
    *(&variable_name) --> got to the address of variable_name and display the stored value 
--------------------------------------------------------------------------------
72- nonintialized pointers called wild pointers undefinded behaviour
    null pointer is a pointer with adress Null ex. int *ptr = NULL;
    dangling pointer is a pointer includes address after free() function
--------------------------------------------------------------------------------
73- to register memorey space with funcion called malloc(SizeOfRegisteredSpace);
    the malloc return the value of the first element address in registered space
    to free the malloc() space from memorey we use free(address) function  
--------------------------------------------------------------------------------
74-explicit casting convert a data type to another baesed on selected one 
    ex. 
    (type_name) expression
    (float)variable_name
--------------------------------------------------------------------------------
75-void pointer fix data type problem but u must use explicit casting to set the
     number of byte of data *((DataType *)PointerName) in case you want to set value in it
     or u take and display from it 
    ex. 
    void *ptr = &number;
    printf("%i",*((unsigned int *)ptr));
    *((unsigned char *)ptr) = 22;
--------------------------------------------------------------------------------
76-call by value when u put value in call of funtion ex. funtio(5,6);
    call by reference when u put the address in call of funtion ex. funtio(&variable1,&variable2);
--------------------------------------------------------------------------------
77-in pointers we must set the pointer with the same type of data 
    we can increment or decrement stored address in pointer and the next address will be based 
    on the type of pointer DataType so u must set it the pointer correctly 
    ex.
    unsigned short Numbers[10] = {0x11,0x22,0x33,0x44,0x55,0x11,0x22,0x33,0x44,0x55};
    unsigned short *Ptr1 = NULL;
    unsigned short *Ptr2 = NULL;
    ptr = &Numbers[0]; // 0x552210
    ptr +=1; 0x552212;
    ptr +=1;0x552214;
    unsigned int Numbers[10] = {0x11,0x22,0x33,0x44,0x55,0x11,0x22,0x33,0x44,0x55};
    unsigned int *Ptr1 = NULL;
    unsigned int *Ptr2 = NULL;
    ptr = &Numbers[0]; // 0x552210
    ptr +=1; //0x552214;
    ptr +=1; //0x552218;

--------------------------------------------------------------------------------
78-adding and substracting address increase or decrease based on pointer DataType size
--------------------------------------------------------------------------------
79-in pointers we cant add or multiple two pointer only substracting
--------------------------------------------------------------------------------
80-if u want to apply arithmetic operation on void pointer u must explicit casting the pointer before
--------------------------------------------------------------------------------
81-in explicit casting void pointer we can increase it with this form (unsigned int *) ptr3 +=1;
    the right one is ptr3 = (unsigned int *) ptr3 + 1;
--------------------------------------------------------------------------------
82-
    p++ --> increment happens only for pointer not the address 
    *p++ -->increment happens only for pointer not the address 
    *(p++) -->increment happens only for pointer not the address 
    (*p)++ -->increment happens only on the value of the memorey which have address 
--------------------------------------------------------------------------------
83-
--------------------------------------------------------------------------------
84-constant pointer doesnt the change data type content but can change the stored adddress
--------------------------------------------------------------------------------
85-becarefull of this two type of pointers
    /* Ptr1 is a pointer , points to const data */
    const unsigned int *Ptr1 = &NumberOne; /* Ptr1 can't change the NumberOne value */
    /* Ptr2 is a pointer , points to const data */
    unsigned int const *Ptr2 = &NumberOne; /* Ptr2 can't change the NumberOne value */
    /* Ptr3 is a const pointer , points to data */
    unsigned int *const Ptr3 = &NumberOne; /* Ptr3 can't be changed, but we can change the data */
    /* Ptr4 is a const pointer , points to const data */
    const unsigned int *const Ptr4 = &NumberOne;
    unsigned int const *const Ptr5 = &NumberOne;
--------------------------------------------------------------------------------
86- to store variable while calling funcion you set static before variable_name
    ex.
    Static int array;
    it's important with pointers too
--------------------------------------------------------------------------------
87-double pointer get access to the adddress of the variable while anotherpointer betwwnthem
    Ex.
    int mar = 5;
    int *ptrmar = &mar;
    int **ptrptrmar = &ptrmar; ---> this is double pointer
    printf("%i",**ptrptrmar); ---> this get access of the content in mar
--------------------------------------------------------------------------------
88- char (*ptr)[20] = NULL; //ptr is pointer point on array leng 20 element type char
    when you increment the pointer move 20 char 
--------------------------------------------------------------------------------
89-memset(location, value, len); --> set the value in memory location 
    memcpy(Dist_location, src_location, leng); ---> compy value from memorey to another
--------------------------------------------------------------------------------
90- Void (*ptr)(void)  ---> function pointer
--------------------------------------------------------------------------------
91-Soring arrays 
    bouble sorting

--------------------------------------------------------------------------------
92-if you wnat set number as addresss use explicit casting EX.
    ptr = (int *)20;
--------------------------------------------------------------------------------
93- char *ArrayPtr[10]; Array of Pointers to char
    
--------------------------------------------------------------------------------
94-
--------------------------------------------------------------------------------
95-
--------------------------------------------------------------------------------
96-
--------------------------------------------------------------------------------
97-
--------------------------------------------------------------------------------
98-
--------------------------------------------------------------------------------
99-
--------------------------------------------------------------------------------
100-
--------------------------------------------------------------------------------
101-
--------------------------------------------------------------------------------
102-
--------------------------------------------------------------------------------
103-
--------------------------------------------------------------------------------
104-
--------------------------------------------------------------------------------
105-
--------------------------------------------------------------------------------
106-
--------------------------------------------------------------------------------
107-
--------------------------------------------------------------------------------
108-
--------------------------------------------------------------------------------
109-
--------------------------------------------------------------------------------
110-
--------------------------------------------------------------------------------
111-
--------------------------------------------------------------------------------
112-
--------------------------------------------------------------------------------
113-
--------------------------------------------------------------------------------
114-
--------------------------------------------------------------------------------
115-
--------------------------------------------------------------------------------
116-
--------------------------------------------------------------------------------
117-
--------------------------------------------------------------------------------
118-
--------------------------------------------------------------------------------
119-
--------------------------------------------------------------------------------
120-
--------------------------------------------------------------------------------
121-
--------------------------------------------------------------------------------
122-
--------------------------------------------------------------------------------
123-
--------------------------------------------------------------------------------
124-
--------------------------------------------------------------------------------
125-
--------------------------------------------------------------------------------
126-
--------------------------------------------------------------------------------
127-
--------------------------------------------------------------------------------
128-
--------------------------------------------------------------------------------
129-
--------------------------------------------------------------------------------
130-
--------------------------------------------------------------------------------
131-
--------------------------------------------------------------------------------
132-
--------------------------------------------------------------------------------
133-
--------------------------------------------------------------------------------
134-
--------------------------------------------------------------------------------
135-
--------------------------------------------------------------------------------
136-
--------------------------------------------------------------------------------
137-
--------------------------------------------------------------------------------
138-
--------------------------------------------------------------------------------
139-
--------------------------------------------------------------------------------
140-
--------------------------------------------------------------------------------
141-
--------------------------------------------------------------------------------
142-
--------------------------------------------------------------------------------
143-
--------------------------------------------------------------------------------
144-
--------------------------------------------------------------------------------
145-
--------------------------------------------------------------------------------
146-
--------------------------------------------------------------------------------
147-
--------------------------------------------------------------------------------
148-
--------------------------------------------------------------------------------
149-
--------------------------------------------------------------------------------
150-
--------------------------------------------------------------------------------
151-
--------------------------------------------------------------------------------
152-
--------------------------------------------------------------------------------
153-
--------------------------------------------------------------------------------
154-
--------------------------------------------------------------------------------
155-
--------------------------------------------------------------------------------
156-
--------------------------------------------------------------------------------
157-
--------------------------------------------------------------------------------
158-
--------------------------------------------------------------------------------
159-
--------------------------------------------------------------------------------
160-
--------------------------------------------------------------------------------
161-
--------------------------------------------------------------------------------
162-
--------------------------------------------------------------------------------
163-
--------------------------------------------------------------------------------
164-
--------------------------------------------------------------------------------
165-
--------------------------------------------------------------------------------
166-
--------------------------------------------------------------------------------
167-
--------------------------------------------------------------------------------
168-
--------------------------------------------------------------------------------
169-
--------------------------------------------------------------------------------
170-
--------------------------------------------------------------------------------
171-
--------------------------------------------------------------------------------
172-
--------------------------------------------------------------------------------
173-
--------------------------------------------------------------------------------
174-
--------------------------------------------------------------------------------
175-
--------------------------------------------------------------------------------
176-
--------------------------------------------------------------------------------
177-
--------------------------------------------------------------------------------
178-
--------------------------------------------------------------------------------
179-
--------------------------------------------------------------------------------
180-
--------------------------------------------------------------------------------
181-
--------------------------------------------------------------------------------
182-
--------------------------------------------------------------------------------
183-
--------------------------------------------------------------------------------
184-
--------------------------------------------------------------------------------
185-
--------------------------------------------------------------------------------
186-
--------------------------------------------------------------------------------
187-
--------------------------------------------------------------------------------
188-
--------------------------------------------------------------------------------
189-
--------------------------------------------------------------------------------
190-
--------------------------------------------------------------------------------
191-
--------------------------------------------------------------------------------
192-
--------------------------------------------------------------------------------
193-
--------------------------------------------------------------------------------
194-
--------------------------------------------------------------------------------
195-
--------------------------------------------------------------------------------
196-
--------------------------------------------------------------------------------
197-
--------------------------------------------------------------------------------
198-
--------------------------------------------------------------------------------
199-
--------------------------------------------------------------------------------
200-
--------------------------------------------------------------------------------
201-
--------------------------------------------------------------------------------
202-
--------------------------------------------------------------------------------
203-
--------------------------------------------------------------------------------
204-
--------------------------------------------------------------------------------
205-
--------------------------------------------------------------------------------
206-
--------------------------------------------------------------------------------
207-
--------------------------------------------------------------------------------
208-
--------------------------------------------------------------------------------
209-
--------------------------------------------------------------------------------
210-
--------------------------------------------------------------------------------
211-
--------------------------------------------------------------------------------
212-
--------------------------------------------------------------------------------
213-
--------------------------------------------------------------------------------
214-
--------------------------------------------------------------------------------
215-
--------------------------------------------------------------------------------
216-
--------------------------------------------------------------------------------
217-
--------------------------------------------------------------------------------
218-
--------------------------------------------------------------------------------
219-
--------------------------------------------------------------------------------
220-
--------------------------------------------------------------------------------
221-
--------------------------------------------------------------------------------
222-
--------------------------------------------------------------------------------
223-
--------------------------------------------------------------------------------
224-
--------------------------------------------------------------------------------
225-
--------------------------------------------------------------------------------
226-
--------------------------------------------------------------------------------
227-
--------------------------------------------------------------------------------
228-
--------------------------------------------------------------------------------
229-
--------------------------------------------------------------------------------
230-
--------------------------------------------------------------------------------
231-
--------------------------------------------------------------------------------
232-
--------------------------------------------------------------------------------
233-
--------------------------------------------------------------------------------
234-
--------------------------------------------------------------------------------
235-
--------------------------------------------------------------------------------
236-
--------------------------------------------------------------------------------
237-
--------------------------------------------------------------------------------
238-
--------------------------------------------------------------------------------
239-
--------------------------------------------------------------------------------
240-
--------------------------------------------------------------------------------
241-
--------------------------------------------------------------------------------
242-
--------------------------------------------------------------------------------
243-
--------------------------------------------------------------------------------
244-
--------------------------------------------------------------------------------
245-
--------------------------------------------------------------------------------
246-
--------------------------------------------------------------------------------
247-
--------------------------------------------------------------------------------
248-
--------------------------------------------------------------------------------
249-
--------------------------------------------------------------------------------
250-
--------------------------------------------------------------------------------
251-
--------------------------------------------------------------------------------
252-
--------------------------------------------------------------------------------
253-
--------------------------------------------------------------------------------
254-
--------------------------------------------------------------------------------
255-
--------------------------------------------------------------------------------
256-
--------------------------------------------------------------------------------
257-
--------------------------------------------------------------------------------
258-
--------------------------------------------------------------------------------
259-
--------------------------------------------------------------------------------
